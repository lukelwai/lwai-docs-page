(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{401:function(a,r,e){"use strict";e.r(r);var o=e(2),t=Object(o.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"kafka来历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka来历"}},[a._v("#")]),a._v(" Kafka来历")]),a._v(" "),r("blockquote",[r("p",[a._v("Kafka最初由Linkedin公司开发，是一个分布式的消息系统，支持分区（partition）、多副本（replica），并且是基于zookeeper分布式协调服务框架的")])]),a._v(" "),r("h2",{attrs:{id:"kafka特性、使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka特性、使用场景"}},[a._v("#")]),a._v(" Kafka特性、使用场景")]),a._v(" "),r("h3",{attrs:{id:"特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[a._v("#")]),a._v(" 特性")]),a._v(" "),r("ol",[r("li",[a._v("高并发：支持数千客户端同时读写")]),a._v(" "),r("li",[a._v("高吞吐、低延时：Kafka每秒处理数据量大，并且延时低")]),a._v(" "),r("li",[a._v("可扩展：支持集群部署")]),a._v(" "),r("li",[a._v("可靠性，支持持久化：消息可持久化到磁盘")]),a._v(" "),r("li",[a._v("高容错性：允许集群节点出问题挂机")])]),a._v(" "),r("h3",{attrs:{id:"使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),r("ol",[r("li",[a._v("日志收集")]),a._v(" "),r("li",[a._v("消息系统：解耦、削峰")]),a._v(" "),r("li",[a._v("流式处理")]),a._v(" "),r("li",[a._v("用户活动跟踪")]),a._v(" "),r("li",[a._v("运营指标监控等等")])]),a._v(" "),r("h2",{attrs:{id:"kafka组成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka组成"}},[a._v("#")]),a._v(" Kafka组成")]),a._v(" "),r("p",{attrs:{align:"center"}},[r("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/kafka/01.jpg"}})]),a._v(" "),r("blockquote",[r("p",[a._v("Kafka像其他Mq一样，也有自己的基础架构，主要存在生产者Producer、Kafka集群Broker、消费者Consumer、注册消息Zookeeper")])]),a._v(" "),r("ol",[r("li",[a._v("Producer：消息生产者，向Kafka中发布消息的角色。")]),a._v(" "),r("li",[a._v("Consumer：消息消费者，即从Kafka中拉取消息消费的客户端。")]),a._v(" "),r("li",[a._v("Consumer Group：消费者组，消费者组则是一组中存在多个消费者，消费者消费Broker中当前Topic的不同分区中的消息，消费者组之间互不影响，所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。某一个分区中的消息只能够一个消费者组中的一个消费者所消费")]),a._v(" "),r("li",[a._v("Broker：经纪人，一台Kafka服务器就是一个Broker，一个集群由多个Broker组成，一个Broker可以容纳多个Topic。")]),a._v(" "),r("li",[a._v("Topic：主题，可以理解为一个队列，生产者和消费者都是面向一个Topic")]),a._v(" "),r("li",[a._v("Partition：分区，为了实现扩展性，一个非常大的Topic可以分布到多个Broker上，一个Topic可以分为多个Partition，每个Partition是一个有序的队列(分区有序，不能保证全局有序)")]),a._v(" "),r("li",[a._v("Replica：副本Replication，为保证集群中某个节点发生故障，节点上的Partition数据不丢失，Kafka可以正常的工作，Kafka提供了副本机制，一个Topic的每个分区有若干个副本，一个Leader\n和多个Follower")]),a._v(" "),r("li",[a._v("Leader：每个分区多个副本的主角色，生产者发送数据的对象，以及消费者消费数据的对象都是Leader。")]),a._v(" "),r("li",[a._v("Follower：每个分区多个副本的从角色，实时的从Leader中同步数据，保持和Leader数据的同步，Leader发生故障的时候，某个Follower会成为新的Leader。")])]),a._v(" "),r("blockquote",[r("p",[a._v("上述一个Topic会产生多个分区Partition，分区中分为Leader和Follower，消息一般发送到Leader，Follower通过数据的同步与Leader保持同步，\n消费的话也是在Leader中发生消费，如果多个消费者，则分别消费Leader和各个Follower中的消息，当Leader发生故障的时候，\n某个Follower会成为主节点，此时会对齐消息的偏移量。")])])])}),[],!1,null,null,null);r.default=t.exports}}]);