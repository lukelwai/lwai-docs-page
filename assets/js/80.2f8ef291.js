(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{452:function(_,v,t){"use strict";t.r(v);var a=t(2),i=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-数据的表示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据的表示"}},[_._v("#")]),_._v(" 1. 数据的表示")]),_._v(" "),v("h3",{attrs:{id:"_1-进制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-进制"}},[_._v("#")]),_._v(" 1. 进制")]),_._v(" "),v("ol",[v("li",[_._v("进制，我们常用的数字其实是10进制，但除了10进制之外还存在其他的进制，比如二进制、16进制等等")]),_._v(" "),v("li",[_._v("位权，每种进制都有自己的位权，根据个位从零开始算，正方向是正数，负方向是负数，\n比如10进制的位权各十百千为：10零次方、10的一次方、10的二次方、10的三次方，二进制的位权是：2的零次方、2的一次方、2的二次方")]),_._v(" "),v("li",[_._v("按权展开法，根据进制的位权，我们可以用按权展开法去表示各个进制的数，展开之后的权值我们可以理解为10进制，这样的数更容易让我们理解")]),_._v(" "),v("li",[_._v("10进制转换成其他进制存在比较方便理解的方法，就是短除法，通过使用10进制数作为被除数，转换进制作为除数，进行循环除法取余，直到被除数变为0为止，\n得到的余数按从下到上的顺序排列即可为转换后的进制数，转换后的进制数可以通过按权展开法进行验证")]),_._v(" "),v("li",[_._v("位数对比转换，二进制、八进制、16进制，之间的转换存在着位数的对应，可通过对应快速转换，比如三位二进制对应一位八进制，不够的高位补零，\n通过这种方式可以快速的进行二进制转八进制、八进制转二进制，例如：010 110 111 转为：2 6 7")])]),_._v(" "),v("h3",{attrs:{id:"_2-码制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-码制"}},[_._v("#")]),_._v(" 2. 码制")]),_._v(" "),v("ol",[v("li",[_._v("原码：最高位是符号位，其余低位是数值的绝对值。（0表示正数，1表示负数），计算机中一般不会通过原码进行直接计算因为原码计算会有很大的偏差，\n一般使用补码进行计算，不过要计算补码一般需要先计算反码，通过反码求补码。")]),_._v(" "),v("li",[_._v("反码：正数的反码与原码相同，负数的反码是其绝对值按位取反（即符号位不变，其他位按位取反）")]),_._v(" "),v("li",[_._v("补码：正数的补码和原码相同，负数的补码是原码的反码加一（即符号位不变，反码 + 1）")]),_._v(" "),v("li",[_._v("移码：一般只用于浮点数的解码，补码的符号位取反即为移码")])]),_._v(" "),v("h3",{attrs:{id:"_3-取值范围-定点整数-定点小数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-取值范围-定点整数-定点小数"}},[_._v("#")]),_._v(" 3. 取值范围（定点整数，定点小数）")]),_._v(" "),v("blockquote",[v("p",[_._v("当n=8,也就是8个位数时，定点小数的取值范围也是通过补整方式求取，如果只有三位数，0.11 + 0.01 = 1.00 也就是补上2的负2次方等于1，\n所以最大值表示为1减去2的负2次方也就是1减去2的负n减1次方")])]),_._v(" "),v("ol",[v("li",[_._v("原码、反码（定点整数）：-127~127，负2的7次方减一到正2的7次方减一（因为零有正负零之分，去掉负零，只能表示2的n减1次方个数）")]),_._v(" "),v("li",[_._v("补码、移码（定点整数）：-128~127，负2的7次方到正2的7次方减一，其中人为规定-128的补码是1000 0000（补码、移码的负零被人为规定了数值，负零确定为负的2的n次方）")]),_._v(" "),v("li",[_._v("原码、反码（定点小数）：-0.1111111~0.1111111，负的1减去2的负n减1次方到正的1减去2的负n减1次方（因为零有正负零之分，去掉负零，只能表示2的n减1次方个数）")]),_._v(" "),v("li",[_._v("补码、移码（定点小数）：-1~0.1111111，负1到正的1减去2的负n减1次方（补码、移码的负零被人为规定了数值，负零确定为-1）")])]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/01.jpg"}})]),_._v(" "),v("h2",{attrs:{id:"_2-浮点数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-浮点数"}},[_._v("#")]),_._v(" 2. 浮点数")]),_._v(" "),v("blockquote",[v("p",[_._v("浮点数一般表示为：尾数*基数·指数")])]),_._v(" "),v("h3",{attrs:{id:"_1-运算过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-运算过程"}},[_._v("#")]),_._v(" 1. 运算过程")]),_._v(" "),v("p",[_._v("对阶->尾数运算->结果格式化")]),_._v(" "),v("h3",{attrs:{id:"_2-特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-特点"}},[_._v("#")]),_._v(" 2. 特点")]),_._v(" "),v("ol",[v("li",[_._v("一般尾数用补码，指数也叫阶码用移码表示")]),_._v(" "),v("li",[_._v("尾数得位数决定数得有效精度，尾数得位数越多，精度越高")]),_._v(" "),v("li",[_._v("阶码的大小决定数的表示范围")]),_._v(" "),v("li",[_._v("对阶时，小数向大数看齐")]),_._v(" "),v("li",[_._v("对阶是通过小数的尾数右移实现")])]),_._v(" "),v("h3",{attrs:{id:"_3-备注"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-备注"}},[_._v("#")]),_._v(" 3. 备注")]),_._v(" "),v("ol",[v("li",[_._v("阶符：阶码的符号位，决定是整数还是小数")]),_._v(" "),v("li",[_._v("数符：尾数部分的符号位，决定数的正负")])]),_._v(" "),v("h2",{attrs:{id:"_3-逻辑运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-逻辑运算"}},[_._v("#")]),_._v(" 3. 逻辑运算")]),_._v(" "),v("blockquote",[v("p",[_._v("逻辑变量之间的运算称为逻辑运算")])]),_._v(" "),v("h3",{attrs:{id:"_1-关系运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-关系运算符"}},[_._v("#")]),_._v(" 1. 关系运算符")]),_._v(" "),v("blockquote",[v("p",[_._v("关系运算符有（[<,<=,>,>=],[==,!=]）,第一个中括号的运算符优先级高于第二个中括号的运算符")])]),_._v(" "),v("ol",[v("li",[_._v("关系运算符优先级低于算数运算符（+,-,*,/）")]),_._v(" "),v("li",[_._v("关系运算符优先级高于赋值运算符（=）")])]),_._v(" "),v("h3",{attrs:{id:"_2-逻辑运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-逻辑运算"}},[_._v("#")]),_._v(" 2. 逻辑运算")]),_._v(" "),v("blockquote",[v("p",[_._v("二进制中，1代表真，0代表假")])]),_._v(" "),v("ol",[v("li",[_._v("逻辑与（&&,*），链接的两个逻辑值全为1时才取1")]),_._v(" "),v("li",[_._v("逻辑或（||,+,OR），链接的两个逻辑值全为0时才取0")]),_._v(" "),v("li",[_._v("逻辑非（!,NOT），逻辑值取反，非假即真，非真即假")]),_._v(" "),v("li",[_._v("逻辑异或(XOR)，只有两个逻辑值不同时，才取1")])]),_._v(" "),v("blockquote",[v("p",[_._v("优先级：逻辑非（!）->逻辑与(&&)->逻辑或(||)")])]),_._v(" "),v("ol",[v("li",[_._v("逻辑运算符中，逻辑与(&&)、逻辑或(||)优先级低于算数运算符，逻辑非（!）优先级高于算术运算符")]),_._v(" "),v("li",[_._v("所以总优先级：逻辑非（!）->算数运算符->关系运算符->逻辑与(&&)->逻辑或(||)->赋值运算符（=）")])]),_._v(" "),v("h3",{attrs:{id:"_3-短路原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-短路原则"}},[_._v("#")]),_._v(" 3. 短路原则")]),_._v(" "),v("blockquote",[v("p",[_._v("在逻辑表达式的求解中，并不是所有的逻辑运算符都要被执行，比如逻辑或(||)，如果第一个逻辑值为真，整个表达式就是真，后续的就不需要运算了，\n比如逻辑与(&&)，如果第一个逻辑值为假，整个表达式就是假，后续的就不需要运算了")])]),_._v(" "),v("h2",{attrs:{id:"_4-校验码概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-校验码概述"}},[_._v("#")]),_._v(" 4. 校验码概述")]),_._v(" "),v("blockquote",[v("p",[_._v("在原有信息的基础上增加了一定的冗余信息帮助信息做校验，并且在计算中因为使用的是二进制，如果信息发生了改变，并且知道改变的位置，\n其实我们是可以通过0、1取反进行纠错的")])]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/02.jpg"}})]),_._v(" "),v("h3",{attrs:{id:"_1-奇偶校验码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-奇偶校验码"}},[_._v("#")]),_._v(" 1. 奇偶校验码")]),_._v(" "),v("blockquote",[v("p",[_._v("奇偶校验，可检查一位的错误，不可纠错")])]),_._v(" "),v("ol",[v("li",[_._v("码距：任何一种编码都由许多码字构成，任意两个码字之间最少变化的二进制位数，就称为校验码的码距")]),_._v(" "),v("li",[_._v("奇偶校验码的编码方法：由若干有效信息（入一个字节），再加上一个二进制位（校验码），组成校验码")]),_._v(" "),v("li",[_._v("奇校验：整个校验码（有效信息位和校验位）中“1”的个数为奇数")]),_._v(" "),v("li",[_._v("偶校验：整个校验码（有效信息位和校验位）中“1”的个数为偶数")])]),_._v(" "),v("h3",{attrs:{id:"_2-crc循环冗余校验码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-crc循环冗余校验码"}},[_._v("#")]),_._v(" 2. CRC循环冗余校验码")]),_._v(" "),v("blockquote",[v("p",[_._v("CRC循环冗余校验码，可检错，不可纠错")])]),_._v(" "),v("ol",[v("li",[_._v("CRC循环冗余校验码的编码方法是：在k位信息码之后拼接r位校验码，\n应用CRC码的关键是如何从k位信息码里面得到r位校验码，以及如何从k+r位信息码中判断信息是否出错")]),_._v(" "),v("li",[_._v("把收到的CRC码，用约定的生成多项式的G（X）去除（模二除法），如果正确则余数为0，如果有一位出错则余数不为0，\n不同的位数出错得到的余数不同，余数和出错位序号之前有唯一的对应关系")])]),_._v(" "),v("h3",{attrs:{id:"_2-海明校验码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-海明校验码"}},[_._v("#")]),_._v(" 2. 海明校验码")]),_._v(" "),v("blockquote",[v("p",[_._v("海明校验码可检错，可纠错。原理：在有效信息位中加入交割校验位形成海明码，使码距比较均匀的拉大。\n并把海明码的每个二进制位分配到几个奇偶校验组中当某一位出错之后就会引起有关的几个校验位的值发生\n变化，这不但可以发现错误，还可以指出错误的位置，为自动纠错提供了依据。")])]),_._v(" "),v("ol",[v("li",[_._v("海明校验码，可以检错和纠错，但是只能检查并纠正单个位的错误，对于多个位的错误的纠正能力有限")]),_._v(" "),v("li",[_._v("海明码位数求取公式：2的r次方减1大于等于m+r，m是信息位，r是校验位，例如16位信息码，根据公式r大于等于5，分别放在2的零次方到2的四次方共五个位置")])]),_._v(" "),v("h2",{attrs:{id:"_5-cpu组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-cpu组成"}},[_._v("#")]),_._v(" 5. CPU组成")]),_._v(" "),v("blockquote",[v("p",[_._v("计算机结构：外设、主机、存储器（主存/内存，辅存/外存）、CPU （运算器，控制器）")])]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/03.jpg"}})]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/04.jpg"}})]),_._v(" "),v("h2",{attrs:{id:"_6-寻址方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-寻址方式"}},[_._v("#")]),_._v(" 6. 寻址方式")]),_._v(" "),v("blockquote",[v("p",[_._v("一条指令就是机器语言的一个语句，它是一组有意义的二进制代码，基本格式是操作码字段 + 地址码字段")])]),_._v(" "),v("ol",[v("li",[_._v("立即寻址方式：将操作数直接放在了指令之中，速度快，灵活性差")]),_._v(" "),v("li",[_._v("直接寻址方式：指令中存放的是操作数的地址")]),_._v(" "),v("li",[_._v("间接寻址方式：指令中放一个地址，这个地址对应的内容是操作数的地址（较为灵活，可以不修改指令的方式修改操作码）")]),_._v(" "),v("li",[_._v("寄存器寻址方式（间接寻址）：寄存器存放操作数")]),_._v(" "),v("li",[_._v("寄存器间接寻址方式：寄存器存放操作数的地址")])]),_._v(" "),v("h2",{attrs:{id:"_7-cisc、risc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-cisc、risc"}},[_._v("#")]),_._v(" 7. CISC、RISC")]),_._v(" "),v("blockquote",[v("p",[_._v("指令系统类型 CISC（复杂）、RISC（精简，使用寄存器寻址方式较多）\n")]),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/05.jpg"}})]),v("p")]),_._v(" "),v("h2",{attrs:{id:"_8-流水线技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-流水线技术"}},[_._v("#")]),_._v(" 8. 流水线技术")]),_._v(" "),v("blockquote",[v("p",[_._v("工业流水线的引喻，流水线技术指的是：程序执行时多条指令重叠进行操作的一种准并行处理实现技术。准并行并不是真的并行，\n只是将指令执行过程进行拆分，比如拆分成取指、分析、执行，每个阶段同时进行，而不是串行的等待一个指令多个阶段全部完成再进行下一个指令的执行")])]),_._v(" "),v("ol",[v("li",[_._v("流水线周期，就是指令分段中最长的一段的执行时间")]),_._v(" "),v("li",[_._v("流水线时间计算公式，理论公式：1条指令的执行时间 + （指令条数-1）"),v("em",[_._v("流水线周期（一般使用理论公式，理论公式找不到答案才用实践公式），\n实践公式: k")]),_._v("t + (n-1)*t,k指的是分段数，t是周期时间，n是指令数")]),_._v(" "),v("li",[_._v("流水线吞吐率，计算公式：指令数/流水线执行时间，流水线最大吞吐率：流水线周期的导数，1/t(t是流水线周期)")])]),_._v(" "),v("h2",{attrs:{id:"_9-存储系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-存储系统"}},[_._v("#")]),_._v(" 9. 存储系统")]),_._v(" "),v("h3",{attrs:{id:"_1-层次化存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-层次化存储"}},[_._v("#")]),_._v(" 1. 层次化存储")]),_._v(" "),v("blockquote",[v("p",[_._v("计算机的存储是进行层次化的分层的，分别为：CPU(寄存器，速度快但容量小，容量以比特位进行计算，成本高)->Cache->内存（主存）->外存（硬盘），\n从左到右，存储的速度是越来越低的，但是容量却是越来越大的。")])]),_._v(" "),v("ol",[v("li",[_._v("局部性原理是层次化存储结构的支撑")]),_._v(" "),v("li",[_._v("时间局部性：刚被访问的内容，立即又被访问，顺序，访问之后立即又被访问")]),_._v(" "),v("li",[_._v("空间局部性：刚被访问的内容，临近的空间很快被访问，循环，相邻访问")]),_._v(" "),v("li",[_._v("虚拟存储体系：二级（主存，辅存），三级（加一个cache）")])]),_._v(" "),v("h3",{attrs:{id:"_2-层次存储分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-层次存储分类"}},[_._v("#")]),_._v(" 2. 层次存储分类")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("按存储位置可以分为：内存和外存。")])]),_._v(" "),v("li",[v("p",[_._v("按存取方式划分：")])])]),_._v(" "),v("p",[_._v("按内容存取：比如Cache（相联存储器）")]),_._v(" "),v("p",[_._v("按地址存取：\n随机存取存储器（如内存）\n顺序存取存储器（如磁带）\n直接存取存储器（如磁盘）")]),_._v(" "),v("p",[_._v("工作方式：\n随机存取存储器RAM（如内存RAM在主存，掉电丢失）\n只读存储器ROM（如BIOS在ROM，掉电保护）")]),_._v(" "),v("h3",{attrs:{id:"_2-cache"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-cache"}},[_._v("#")]),_._v(" 2. Cache")]),_._v(" "),v("blockquote",[v("p",[_._v("在计算机存储体系中，Cache是访问速度最快的，因为寄存器不在存储体系中，如果在寄存器最快。")])]),_._v(" "),v("ol",[v("li",[_._v("Cache位于cpu和主存之间")]),_._v(" "),v("li",[_._v("Cache是依据局部性原理来改善系统性能的，访问命中率一般在90%，用1减这个命中率就是失效率")]),_._v(" "),v("li",[_._v("主存与Cache之间的地址映射由硬件直接完成")])]),_._v(" "),v("p",[_._v("直接相联映像：冲突率高，电路简单\n全相联映像：冲突率低，电路复杂\n组相联映像：冲突和电路都是二者折中")]),_._v(" "),v("h3",{attrs:{id:"_3-主存编址计算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-主存编址计算"}},[_._v("#")]),_._v(" 3. 主存编址计算")]),_._v(" "),v("ol",[v("li",[_._v("存储单元个数 = 最大地址 - 最小地址 + 1")]),_._v(" "),v("li",[_._v("总容量 = 存储单元 * 编址内容（编址内容是字节B或者比特位bit）")]),_._v(" "),v("li",[_._v("1k = 2的10次方，1M = 2的10次方k(也就是2的20次方)，1G = 2的10次方M（也就是2的30次方）")]),_._v(" "),v("li",[_._v("总容量 = 单位芯片容量 * 总片数")])]),_._v(" "),v("h2",{attrs:{id:"_10-输入输出技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-输入输出技术"}},[_._v("#")]),_._v(" 10. 输入输出技术")]),_._v(" "),v("blockquote",[v("p",[_._v("输入输出其实也就是I/O技术，指的是CPU控制主存和外设之间进行数据交互的过程")])]),_._v(" "),v("h3",{attrs:{id:"_1-数据传输控制方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据传输控制方式"}},[_._v("#")]),_._v(" 1. 数据传输控制方式")]),_._v(" "),v("blockquote",[v("p",[_._v("从上往下处理速度是越来越快的")])]),_._v(" "),v("ol",[v("li",[_._v("程序控制方式：分为无条件传输和程序查询方式两种。方法简单，硬件开销小，但I/O能力不高，严重影响CPU的利用率")]),_._v(" "),v("li",[_._v("程序中断方式：与程序控制方式相比，中断方式因CPU无需等待而提高了传输请求的响应速度\n"),v("ul",[v("li",[_._v("CPU无需等待也不必去查询I/O状态")]),_._v(" "),v("li",[_._v("当I/O程序准备好之后会发出中断请求信号通知CPU")]),_._v(" "),v("li",[_._v("CPU接到中断信号之后会保存正在执行的现场（也就是断点）")]),_._v(" "),v("li",[_._v("（通过中断向量表）转入I/O中的服务程序的执行，完成I/O系统的数据交换")]),_._v(" "),v("li",[_._v("返回被打断的程序继续执行")])])]),_._v(" "),v("li",[_._v("DMA方式：DMA方式是为了在主存和外设之间实现高速批量数据交换设置的。DMA方式比程序控制方式和中断方式都高效\n"),v("ul",[v("li",[_._v("DMAC向总线裁决逻辑提出总线请求，CPU执行完当前总线周期即可释放总线控制权，此时DMA响应，通过DMAC通知I/O接口进行DMA传输，不需要CPU执行指令传送数据")])])]),_._v(" "),v("li",[_._v("通道方式")]),_._v(" "),v("li",[_._v("I/O处理机")])]),_._v(" "),v("h2",{attrs:{id:"_11-总线"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-总线"}},[_._v("#")]),_._v(" 11. 总线")]),_._v(" "),v("blockquote",[v("p",[_._v("分时双工：一条总线同一时间只允许仅允许一个设备发送，但是运行多个设备接收")])]),_._v(" "),v("ol",[v("li",[_._v("数据总线：在CPU和RAM之间来回传送需要处理亦或者需要存储的数据")]),_._v(" "),v("li",[_._v("地址总线：用来指定RAM之中存储的数据的地址")]),_._v(" "),v("li",[_._v("控制总线：将微处理器控制单元的信号传递到周边的设备")])]),_._v(" "),v("h2",{attrs:{id:"_12-可靠性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-可靠性"}},[_._v("#")]),_._v(" 12. 可靠性")]),_._v(" "),v("blockquote",[v("p",[_._v("可靠性指标")])]),_._v(" "),v("ol",[v("li",[_._v("平均无故障时间：MTTF = 1/y,y是失效率")]),_._v(" "),v("li",[_._v("平均故障修复时间：MTTR = 1/x,x是修复率")]),_._v(" "),v("li",[_._v("平均故障间隔时间： MTBF = MTTR + MTTF")]),_._v(" "),v("li",[_._v("系统可用性：MTTF/(MTTR + MTTF) * 100%")]),_._v(" "),v("li",[_._v("可靠性可以 = MTTF/(1 + MTTF)")]),_._v(" "),v("li",[_._v("串联可靠性 = 所有部分可靠性相乘")]),_._v(" "),v("li",[_._v("并联可靠性 = 1 - (1-R)*并联数量")])]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/06.jpg"}})]),_._v(" "),v("h2",{attrs:{id:"_13-性能指标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-性能指标"}},[_._v("#")]),_._v(" 13. 性能指标")]),_._v(" "),v("ol",[v("li",[_._v("字长和数据通路宽度(一般考32位的字长)")]),_._v(" "),v("li",[_._v("主存容量和存储速度")]),_._v(" "),v("li",[_._v("运算速度\n"),v("ul",[v("li",[_._v("主频（数据能够在一次性通过的次数，例：2.4GHZ）与CPU时钟周期（每一次通过所花费的时间就是时钟周期，例如：1秒/2.4GHZ秒）")]),_._v(" "),v("li",[_._v("CPI（每条指令占据的始终周期数）和IPC（每个时钟周期运行的指令数）")]),_._v(" "),v("li",[_._v("MIPS（百万条指令每秒，主频/CPI）与MFLOPS（每秒百万个浮点数运算速度）")])])]),_._v(" "),v("li",[_._v("吞吐量和吞吐率（单位时间内的数据量）")]),_._v(" "),v("li",[_._v("响应时间（RT，提交请求之后到完成请求的时间叫响应时间）与完成时间（TAT，指令执行完成的时间）")]),_._v(" "),v("li",[_._v("兼容性")])]),_._v(" "),v("h2",{attrs:{id:"_14-计算机组成和体系结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-计算机组成和体系结构"}},[_._v("#")]),_._v(" 14. 计算机组成和体系结构")]),_._v(" "),v("ol",[v("li",[_._v("计算机基础知识\n"),v("ul",[v("li",[_._v("数据的表示")]),_._v(" "),v("li",[_._v("校验码")])])]),_._v(" "),v("li",[_._v("计算机组成\n"),v("ul",[v("li",[_._v("CPU组成（控制器和运算器）")]),_._v(" "),v("li",[_._v("存储系统 *\n"),v("ul",[v("li",[_._v("层次化结构存储")]),_._v(" "),v("li",[_._v("Cache")]),_._v(" "),v("li",[_._v("主存编址计算")])])]),_._v(" "),v("li",[_._v("输入输出（I/O）*")]),_._v(" "),v("li",[_._v("总线系统")])])]),_._v(" "),v("li",[_._v("指令系统\n"),v("ul",[v("li",[_._v("寻址方式")]),_._v(" "),v("li",[_._v("CISC、RISC")]),_._v(" "),v("li",[_._v("流水线技术")])])]),_._v(" "),v("li",[_._v("可靠性 *")]),_._v(" "),v("li",[_._v("计算机性能指标")]),_._v(" "),v("li",[_._v("其他")])]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/07.jpg"}})]),_._v(" "),v("p",{attrs:{align:"center"}},[v("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"/images/test/08.jpg"}})]),_._v(" "),v("h2",{attrs:{id:"_15-计算机组成和体系结构回顾"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-计算机组成和体系结构回顾"}},[_._v("#")]),_._v(" 15. 计算机组成和体系结构回顾")]),_._v(" "),v("ol",[v("li",[_._v("补码、移码的取值范围")]),_._v(" "),v("li",[_._v("逻辑运算里面的短路原则")]),_._v(" "),v("li",[_._v("海明码的求取公式")]),_._v(" "),v("li",[_._v("流水线技术，流水线时间计算 = 一条指令的计算时间 + （指令总数 - 1）* 流水线周期（最大间隔值）")]),_._v(" "),v("li",[_._v("主存编址\n"),v("ul",[v("li",[_._v("存储单元个数 = 最大地址 - 最小地址 + 1")]),_._v(" "),v("li",[_._v("总容量 = 存储单元 * 编址内容（编址内容是字节B或者比特位bit）")]),_._v(" "),v("li",[_._v("1k = 2的10次方，1M = 2的10次方k(也就是2的20次方)，1G = 2的10次方M（也就是2的30次方）")]),_._v(" "),v("li",[_._v("总容量 = 单位芯片容量 * 总片数")])])]),_._v(" "),v("li",[_._v("可靠性计算\n"),v("ul",[v("li",[_._v("可靠性可以 = MTTF/(1 + MTTF)")]),_._v(" "),v("li",[_._v("串联可靠性 = 所有部分可靠性相乘")]),_._v(" "),v("li",[_._v("并联可靠性 = 1 - (1-R)*并联数量")])])]),_._v(" "),v("li",[_._v("计算机指标\n"),v("ul",[v("li",[_._v("主频（数据能够在一次性通过的次数，例：2.4GHZ）与CPU时钟周期（每一次通过所花费的时间就是时钟周期，例如：1秒/2.4GHZ秒）")]),_._v(" "),v("li",[_._v("CPI（每条指令占据的始终周期数）和IPC（每个时钟周期运行的指令数）")]),_._v(" "),v("li",[_._v("MIPS（百万条指令每秒，主频/CPI）与MFLOPS（每秒百万个浮点数运算速度）")])])])]),_._v(" "),v("h2",{attrs:{id:"参考链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[_._v("#")]),_._v(" 参考链接")]),_._v(" "),v("ol",[v("li",[_._v("https://www.bilibili.com/video/BV13U4y1E7oA?p=52&spm_id_from=pageDriver&vd_source=8974f34780394a2fa0830cc76fadcb3f")])])])}),[],!1,null,null,null);v.default=i.exports}}]);